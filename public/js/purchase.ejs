import { Connection, PublicKey, clusterApiUrl, Transaction, SystemProgram, LAMPORTS_PER_SOL } from "https://cdn.jsdelivr.net/npm/@solana/web3.js@1.98.4/+esm";
import { PhantomWalletAdapter } from "https://cdn.jsdelivr.net/npm/@solana/wallet-adapter-phantom@0.9.28/+esm";
import { SolflareWalletAdapter } from "https://cdn.jsdelivr.net/npm/@solana/wallet-adapter-solflare@0.6.32/+esm";

// HTML elements
const connectWalletBtn = document.getElementById("connectWallet");
const walletOptions = document.getElementById("walletOptions");
const disconnectBtn = document.getElementById("disconnectWallet");
const walletAddressEl = document.getElementById("walletAddress");
const buyNowBtn = document.getElementById("buyNow");
const amountInput = document.getElementById("amountInput");
const usdValueEl = document.getElementById("usdValue");
const networkInfoEl = document.getElementById("networkInfo");

let wallet = null;
let connected = false;
let currentNetwork = "devnet";
let connection = new Connection(clusterApiUrl(currentNetwork), "confirmed");

// FREP Price
const FREP_PRICE = 0.001;

// Live Calculator
amountInput.addEventListener("input", () => {
  const amount = parseFloat(amountInput.value) || 0;
  usdValueEl.textContent = `USD Value: $${(amount * FREP_PRICE).toFixed(4)}`;
});

// Wallet Adapters
const wallets = {
  phantom: new PhantomWalletAdapter(),
  solflare: new SolflareWalletAdapter(),
};

// Show wallet options
connectWalletBtn.addEventListener("click", () => {
  walletOptions.classList.remove("hidden");
});

// Connect selected wallet
walletOptions.addEventListener("change", async () => {
  const type = walletOptions.value;
  if (!wallets[type]) return alert("Wallet not supported");

  wallet = wallets[type];
  try {
    await wallet.connect();
    connected = true;

    walletAddressEl.textContent = `Address: ${wallet.publicKey.toBase58().slice(0,6)}...${wallet.publicKey.toBase58().slice(-4)}`;
    buyNowBtn.disabled = false;

    connectWalletBtn.classList.add("hidden");
    walletOptions.classList.add("hidden");
    disconnectBtn.classList.remove("hidden");

  } catch (err) {
    alert("Connection failed: " + err.message);
  }
});

// Disconnect Wallet
disconnectBtn.addEventListener("click", async () => {
  if (wallet) {
    try { await wallet.disconnect(); } catch {}
  }
  connected = false;
  walletAddressEl.textContent = "";
  buyNowBtn.disabled = true;

  connectWalletBtn.classList.remove("hidden");
  walletOptions.classList.add("hidden");
  disconnectBtn.classList.add("hidden");
});

// Buy Now
buyNowBtn.addEventListener("click", async () => {
  if (!connected) return alert("Please connect a wallet first");
  if (currentNetwork !== "devnet") return alert("Only devnet is supported now");

  const amount = parseFloat(amountInput.value);
  if (!amount || amount <= 0) return alert("Enter a valid amount");

  const lamports = amount * FREP_PRICE * LAMPORTS_PER_SOL;
  const treasury = new PublicKey("PUT_YOUR_DEVNET_WALLET_HERE"); // Replace with your test wallet

  const transaction = new Transaction().add(
    SystemProgram.transfer({
      fromPubkey: wallet.publicKey,
      toPubkey: treasury,
      lamports,
    })
  );

  try {
    const signature = await wallet.sendTransaction(transaction, connection);
    alert(`Transaction sent âœ…\nSignature: ${signature}`);
  } catch (err) {
    alert("Transaction failed: " + err.message);
  }
});
